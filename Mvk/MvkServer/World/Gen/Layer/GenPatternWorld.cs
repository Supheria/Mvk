using MvkServer.Glm;

namespace MvkServer.World.Gen.Layer
{
    /// <summary>
    /// Объект генерации шиблона мира
    /// </summary>
    public class GenPatternWorld
    {
        /// <summary>
        /// Seed из мира, который используется в LCG
        /// </summary>
        private long worldGenSeed;

        /// <summary>
        /// Вспомогательный вектор для рандомного направления
        /// </summary>
        private vec2i vec;

        public GenPatternWorld(long worldSeed)
        {
            worldGenSeed = worldSeed;
        }

        /// <summary>
        /// Возвращает псевдослучайное число LCG из [0, x). Аргументы: целое х
        /// </summary>
        private int NextInt(int x)
        {
            int random = (int)((worldGenSeed >> 24) % x);
            if (random < 0) random += x;

            worldGenSeed *= worldGenSeed * 6364136223846793005L + 1442695040888963407L;
            worldGenSeed += worldGenSeed;
            return random;
        }

        private void GetVecNext()
        {
            int idx = NextInt(4);
            if (idx == 0)
            {
                vec.x = 1;
                vec.y = 0;
            }
            else if (idx == 1)
            {
                vec.x = 0;
                vec.y = 1;
            }
            else if (idx == 2)
            {
                vec.x = -1;
                vec.y = 0;
            }
            else if (idx == 3)
            {
                vec.x = 0;
                vec.y = -1;
            }
        }

        /// <summary>
        /// Получить массив шаблона мира
        /// </summary>
        public byte[] GetArray()
        {
            //int[] ar = new int[1024];
            //int x, y, i;

            //x = 15;
            //y = 15;

            //ar[y << 5 | x] = (int)EnumBiome.Mountains;

            //for (i = 0; i < 16; i++)
            //{
            //    GetVecNext();
            //    x += vec.x;
            //    y += vec.y;
            //    ar[y << 5 | x] = (int)EnumBiome.Mountains;
            //}

            /**
             *          North
             *         (Север)
             *
             *   West           East
             * (Запад)        (Восток)
             * 
             *         South
             *          (Юг)
             */


            return new byte[] {
             // 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7,
/*  0 */        0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
/*  1 */        0, 6, 6, 9, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0,
/*  2 */        0, 6, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0,
/*  3 */        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 0, 0,
/*  4 */        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
/*  5 */        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
/*  6 */        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
/*  7 */        0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 9, 9, 9, 9, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
/*  8 */        0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 9, 9, 9, 9, 9, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
/*  9 */        0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 9, 9, 9, 9, 9, 9, 2, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
/* 10 */        0, 0, 0, 0, 0, 0, 0, 2, 2, 7, 2, 2, 5, 9, 9, 9, 9, 2, 9, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
/* 11 */        0, 0, 0, 0, 0, 0, 0, 2, 7, 7, 7, 7, 5, 5, 2, 9, 9, 6, 2, 6, 6, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
/* 12 */        0, 0, 0, 0, 0, 0, 2, 2, 7, 7, 7, 7, 2, 2, 2, 2, 6, 6, 6, 2, 6, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0,
/* 13 */        0, 0, 0, 0, 0, 0, 0, 2, 2, 7, 7, 7, 7, 5, 2, 2, 6, 6, 6, 6, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0,
/* 14 */        0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 7, 7, 7, 7, 5, 2, 6, 6, 6, 6, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
/* 15 */        0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 5, 7, 5, 5, 5,10,10,10, 6, 5, 5, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
/*  0 */        0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 5, 5, 2,10,10,10,10,10, 5, 2, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0,
/*  1 */        0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2,10,10,10,10,10,10, 5, 5, 5, 5, 2, 2, 2, 0, 0, 0, 0, 0, 0,
/*  2 */        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2,10,10,10,10,10,10,10, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0,
/*  3 */        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2,10, 2,10,10,10,10,10, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0,
/*  4 */        0, 0, 0, 0,10, 0, 0, 0, 0, 0, 0, 2, 2, 2,10, 2, 2,10,10,10,10, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
/*  5 */        0, 0, 0,10,10,10, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0,10,10,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
/*  6 */        0, 0,10,10,10,10, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
/*  7 */        0, 0, 0, 0,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0,
/*  8 */        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3,11,11,11, 3, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0,
/*  9 */        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 3, 3,11,11,11, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0,
/* 10 */        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 8, 8, 3, 3,11, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0,
/* 11 */        0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0,
/* 12 */        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 8, 0,
/* 13 */        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8,
/* 14 */        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8,
/* 15 */        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            };

        }

        private int[] GetTest()
        {
            int[] ar = new int[1024];
            int x, y;

            for (x = 2; x < 12; x++)
            {
                for (y = 2; y < 12; y++)
                {
                    ar[y << 5 | (x * 2)] = x;
                    ar[y << 5 | (x * 2 + 1)] = y;
                }
            }

            ar[15 << 5 | 15] = 2;

            return ar;
        }
    }
}
